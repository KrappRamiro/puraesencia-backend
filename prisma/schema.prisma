// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// The payment methods that the beauty center support
model PaymentMethod {
    id   String @id @unique @default(uuid())
    name String

    // Relationshipps
    professionalPayments Professional_Payment_Method[]
    VisitProductPayments Visit_Product_Payment[]
}

// The professional that works in the beauty center
model Professional {
    id   String @id @unique @default(uuid())
    cuit String

    // Relationshipps
    payments Professional_Payment[]
}

// The payments to the professionals
model Professional_Payment {
    id   String   @id @unique @default(uuid())
    date DateTime

    // FK
    professionalId String

    // Relationships
    professional Professional                  @relation(fields: [professionalId], references: [id])
    methods      Professional_Payment_Method[]
}

// A payment to a professional may be composed of multiple payment methods. For example, they may try to pay part in cash, part with Mercado Pago, etc...
// This table was made to support that many to many relationship.
model Professional_Payment_Method {
    id     String  @id @unique @default(uuid())
    amount Decimal @db.Money

    // FK
    paymentId       String
    paymentMethodId String

    // Relationships
    payment       Professional_Payment @relation(fields: [paymentId], references: [id])
    paymentMethod PaymentMethod        @relation(fields: [paymentMethodId], references: [id])
}

// The customer table
model Customer {
    id          String  @id @unique @default(uuid())
    name        String
    phoneNumber String?
    cuit        String?

    // Relationships
    visits Visit[]
}

// A customer can visit the beauty store. They can consume different Products (like a haircut, get their nails done, etc...).
model Product {
    id   String @id @unique @default(uuid())
    name String

    // FK
    categoryId String

    // Relationships
    category Category        @relation(fields: [categoryId], references: [id])
    visits   Visit_Product[]
}

// Those Products can have different categories (a haircuit is from the hairdressing category, getting the nails done is from the manicure category, etc...)
model Category {
    id   String @id @unique @default(uuid())
    name String

    // Relationships
    products Product[]
}

// Every time a customer visits the beauty center, a new visit is registered
model Visit {
    id   String   @id @unique @default(uuid())
    date DateTime

    // FK
    customerId String

    // Relationships
    customer Customer                @relation(fields: [customerId], references: [id])
    products Visit_Product[]
    payments Visit_Product_Payment[]
}

// The products a Customer consumes when they visit the store (for example, they get their hair cut and their nails done)
model Visit_Product {
    id String @id @unique @default(uuid())

    // FK
    visitId   String
    productId String

    // Relationships
    visit    Visit                   @relation(fields: [visitId], references: [id])
    product  Product                 @relation(fields: [productId], references: [id])
    payments Visit_Product_Payment[]
}

// Each product can be paid via multiple payment methods
model Visit_Product_Payment {
    id     String  @id @unique @default(uuid())
    amount Decimal @db.Money

    // FK
    visitId         String
    paymentMethodId String
    visitProductId  String

    // Relationships
    visit         Visit         @relation(fields: [visitId], references: [id])
    paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
    visitProduct  Visit_Product @relation(fields: [visitProductId], references: [id])
}
