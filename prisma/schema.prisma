// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// The professional that works in the beauty center
model Professional {
    id       String                @id @default(uuid())
    payments ProfessionalPayment[]
}

// The payment methods that the beauty center support
model PaymentMethod {
    id                   String                               @id @default(uuid())
    name                 String
    professionalPayments ProfessionalPayment_PaymentMethods[]
    visitsPayments       Visit_Payments[]
}

// The payments to the professionals
model ProfessionalPayment {
    id             String                               @id @default(uuid())
    date           DateTime
    professional   Professional                         @relation(fields: [professionalId], references: [id])
    professionalId String
    payments       ProfessionalPayment_PaymentMethods[]
}

// A payment to a professional may be composed of multiple payment methods. For example, they may try to pay part in cash, part with Mercado Pago, etc...
// This table was made to support that many to many relationship.
model ProfessionalPayment_PaymentMethods {
    id                     String              @id @default(uuid())
    professionalPayment    ProfessionalPayment @relation(fields: [professionalPaymentsId], references: [id])
    professionalPaymentsId String
    paymentMethod          PaymentMethod       @relation(fields: [paymentMethodId], references: [id])
    paymentMethodId        String
    amount                 Decimal             @db.Money
}

// The customer table
model Customer {
    id          String  @id @default(uuid())
    name        String
    phoneNumber String
    cuit        String?
    visits      Visit[]
}

// A customer can visit the beauty store. They can consume different Services (like a haircut, get their nails done, etc...).
model Service {
    id             String           @id @default(uuid())
    name           String
    category       Category         @relation(fields: [categoryId], references: [id])
    categoryId     String
    visitsServices Visit_Services[]
}

// Those Services can have different categories (a haircuit is from the hairdressing category, getting the nails done is from the manicure category, etc...)
model Category {
    id       String    @id @default(uuid())
    name     String
    services Service[]
}

// Every time a customer visits the beauty center, a new visit is registered
model Visit {
    id         String           @id @default(uuid())
    customer   Customer         @relation(fields: [customerId], references: [id])
    customerId String
    date       DateTime
    services   Visit_Services[]
    payments   Visit_Payments[]
}

// The services a Customer consumes when they visit the store (for example, they get their hair cut and their nails done)
model Visit_Services {
    id        String  @id @default(uuid())
    visit     Visit   @relation(fields: [visitId], references: [id])
    visitId   String
    service   Service @relation(fields: [serviceId], references: [id])
    serviceId String
}

// Each visit to the beauty center can be paid via multiple payment methods
model Visit_Payments {
    id              String        @id @default(uuid())
    visit           Visit         @relation(fields: [visitId], references: [id])
    visitId         String
    paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
    paymentMethodId String
    amount          Decimal       @db.Money
}
